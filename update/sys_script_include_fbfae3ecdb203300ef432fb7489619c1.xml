<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_7725_csvcreator.fileCreator</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>fileCreator</name>
        <script><![CDATA[var fileCreator = Class.create();
fileCreator.prototype = {
	initialize: function () {
	},
	
	/*
 	* stringToAttachment - creates an attachment
 	*
 	* @param table - the table name that attachment needs to upload to
 	* @param sys_id - the sys_id of the record in the table
 	* @param data - the string you want to upload into an attachment
 	* @param file_name - what the attachment should be called, remember to include extension
 	* @param content_type - what type of file is it
 	* @param return_function - function that will be called on return of REST call, will return with response and status parameters
 	*
 	*/
	
	attachViaREST: function (table, table_sys_id, data, file_name, content_type, return_function) {
		
		var instance = gs.getProperty("instance_name");
		var request = new sn_ws.RESTMessageV2();
		request.setEndpoint('https://'+instance+'.service-now.com/api/now/attachment/file?table_name='+ table+'&table_sys_id='+table_sys_id+'&file_name=' +file_name);
		request.setHttpMethod('POST');
		request.setRequestBody(data);
		
		var user = gs.getProperty("x_7725_csvcreator.csv.creator.username");
		var password = gs.getProperty("x_7725_csvcreator.csv.creator.password");
		
		request.setBasicAuth(user, password);
		request.setRequestHeader("Accept", "application/json");
		request.setRequestHeader('Content-Type', content_type);
		
		var response = request.execute();
		var responseBody = response.getBody();
		var httpStatus = response.getStatusCode();
		if (httpStatus == 201) {
			return_function(responseBody, httpStatus);
		} else {
			gs.info("Could not load attachment to: " + table + '   response: ' + responseBody, "string_to_attachment");
		}
		
	},
	
	/*
 	*	Code taken from angular-csv-binding
 	*	@param array - the object you want to convert to csv
 	*	@param exclude - an array of keys you want to exclude
 	*  @param, del - the delimiter to use
 	*  @param, hasHeaders - true or false for whether it should display headers
 	*/
	arrayToCSV: function (array, exclude, del, hasHeaders, header_line) {
		var delimiter = del,
		out = [],
		headers_h = [],
		headers_d = [];
		header_line = (typeof header_line != 'undefined' && header_line != '') ? header_line : false;
		var arrayUtil = new global.ArrayUtil();
		//Get updated headers
		if (hasHeaders) {
			if (array[0]['header']) {
				for (var key in array[0]['header']) {
					if (arrayUtil.indexOf(headers_h, array[0]['header'][key]) == -1) {
						headers_h.push(array[0]['header'][key]);
						gs.log(array[0]['header'][key]);
					}
				}
				if (array[0]['detail'][0]) {
					for (var key2 in array[0]['detail'][0]) {
						if (arrayUtil.indexOf(headers_d, array[0]['detail'][0][key2]) == -1) {
							headers_d.push(array[0]['detail'][0][key2]);
							gs.log(array[0]['detail'][0][key2]);
						}
					}
				}
			}
		}
		
		for (var j = 0; j < array.length; j++) {
			var item = array[j];
			var headerLine = [];
			var detailLine = [];
			
			if (hasHeaders) {
				for (var h = 0; h < headers_h.length; h++) {
					if (item['header'][headers_h[h]]) {
						headerLine.push(item['header'][headers_h[h]].toString() || '');
						
					} else {
						gs.log('header:' + headers_h[h]);
					}
				}
			} else {
				for (var hh = 0; hh < item['header'].length; hh++) {
					headerLine.push(item['header'][hh].toString() || '');
				}
			}
			out.push(headerLine.join(delimiter));
			//Included for the use case where we have multiple detail rows
			for (var d = 0; d < item['detail'].length; d++) {
				detailLine = [];
				var detail = item['detail'][d];
				if (hasHeaders) {
					for (var k = 0; k < headers_d.length; k++) {
						if (detail[headers_d[k]]) {
							detailLine.push(detail[headers_d[k]].toString() || '');
						} else {
							gs.log('header:' + headers_d[k]);
						}
					}
				} else {
					for (var kk = 0; kk < detail.length; kk++) {
						detailLine.push(detail[kk].toString() || '');
					}
				}
				out.push(detailLine.join(delimiter));
			}
		}
		
		return out.join('\n');
	},
	
	arrayToCSVString: function (array, exclude, del) {
		var delimiter = del || '|',
		hasHeaders = true,
		out = [],
		headers = [];
		
		//Get updated headers
		if (hasHeaders) {
			for (var i = 0; i < array.length; i++) {
				for (var key in array[i]) {
					if (headers.indexOf(key) == -1) {
						if (exclude.indexOf(key) == -1) {
							headers.push(key);
						}
					}
				}
			}
			out.push(headers.join(delimiter));
		}
		
		//Prepare out string
		for (var j = 0; j < array.length; j++) {
			var item = array[j];
			var outLine = [];
			
			if (hasHeaders) {
				for (var h = 0; h < headers.length; h++) {
					outLine.push(item[headers[h]].toString() || '0');
				}
			} else {
				for (var n = 0; n < headers.length; n++) {
					outLine.push(item[n].toString() || '0');
				}
			}
			
			out.push(outLine.join(delimiter));
		}
		
		return out.join('\n');
	},
	
	type: 'fileCreator'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-03-29 17:46:46</sys_created_on>
        <sys_id>fbfae3ecdb203300ef432fb7489619c1</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>fileCreator</sys_name>
        <sys_package display_value="csvCreator" source="x_7725_csvcreator">109aabacdb203300ef432fb748961979</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="csvCreator">109aabacdb203300ef432fb748961979</sys_scope>
        <sys_update_name>sys_script_include_fbfae3ecdb203300ef432fb7489619c1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-03-29 20:08:32</sys_updated_on>
    </sys_script_include>
</record_update>
